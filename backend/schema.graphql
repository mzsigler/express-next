# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Car {
  id: ID!
  year: Int
  make: String
  model: String
  inv: String
  vin: String
  income(
    where: IncomeWhereInput! = {}
    orderBy: [IncomeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Income!]
  incomeCount(where: IncomeWhereInput! = {}): Int
  expense(
    where: ExpenseWhereInput! = {}
    orderBy: [ExpenseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Expense!]
  expenseCount(where: ExpenseWhereInput! = {}): Int
}

input CarWhereUniqueInput {
  id: ID
}

input CarWhereInput {
  AND: [CarWhereInput!]
  OR: [CarWhereInput!]
  NOT: [CarWhereInput!]
  id: IDFilter
  year: IntNullableFilter
  make: StringFilter
  model: StringFilter
  inv: StringFilter
  vin: StringFilter
  income: IncomeManyRelationFilter
  expense: ExpenseManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input IncomeManyRelationFilter {
  every: IncomeWhereInput
  some: IncomeWhereInput
  none: IncomeWhereInput
}

input ExpenseManyRelationFilter {
  every: ExpenseWhereInput
  some: ExpenseWhereInput
  none: ExpenseWhereInput
}

input CarOrderByInput {
  id: OrderDirection
  year: OrderDirection
  make: OrderDirection
  model: OrderDirection
  inv: OrderDirection
  vin: OrderDirection
}

input CarUpdateInput {
  year: Int
  make: String
  model: String
  inv: String
  vin: String
  income: IncomeRelateToManyForUpdateInput
  expense: ExpenseRelateToManyForUpdateInput
}

input IncomeRelateToManyForUpdateInput {
  disconnect: [IncomeWhereUniqueInput!]
  set: [IncomeWhereUniqueInput!]
  create: [IncomeCreateInput!]
  connect: [IncomeWhereUniqueInput!]
}

input ExpenseRelateToManyForUpdateInput {
  disconnect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
  create: [ExpenseCreateInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input CarUpdateArgs {
  where: CarWhereUniqueInput!
  data: CarUpdateInput!
}

input CarCreateInput {
  year: Int
  make: String
  model: String
  inv: String
  vin: String
  income: IncomeRelateToManyForCreateInput
  expense: ExpenseRelateToManyForCreateInput
}

input IncomeRelateToManyForCreateInput {
  create: [IncomeCreateInput!]
  connect: [IncomeWhereUniqueInput!]
}

input ExpenseRelateToManyForCreateInput {
  create: [ExpenseCreateInput!]
  connect: [ExpenseWhereUniqueInput!]
}

type Income {
  id: ID!
  amount: Float
  customer: String
  notes: String
  closeDate: CalendarDay
  mileage: Int
  car: Car
}

scalar CalendarDay
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input IncomeWhereUniqueInput {
  id: ID
}

input IncomeWhereInput {
  AND: [IncomeWhereInput!]
  OR: [IncomeWhereInput!]
  NOT: [IncomeWhereInput!]
  id: IDFilter
  amount: FloatNullableFilter
  customer: StringFilter
  notes: StringFilter
  closeDate: CalendarDayNullableFilter
  mileage: IntNullableFilter
  car: CarWhereInput
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input IncomeOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  customer: OrderDirection
  notes: OrderDirection
  closeDate: OrderDirection
  mileage: OrderDirection
}

input IncomeUpdateInput {
  amount: Float
  customer: String
  notes: String
  closeDate: CalendarDay
  mileage: Int
  car: CarRelateToOneForUpdateInput
}

input CarRelateToOneForUpdateInput {
  create: CarCreateInput
  connect: CarWhereUniqueInput
  disconnect: Boolean
}

input IncomeUpdateArgs {
  where: IncomeWhereUniqueInput!
  data: IncomeUpdateInput!
}

input IncomeCreateInput {
  amount: Float
  customer: String
  notes: String
  closeDate: CalendarDay
  mileage: Int
  car: CarRelateToOneForCreateInput
}

input CarRelateToOneForCreateInput {
  create: CarCreateInput
  connect: CarWhereUniqueInput
}

type Expense {
  id: ID!
  amount: Float
  vendor: String
  description: String
  date: CalendarDay
  mileage: Int
  receiptNumber: String
  car: Car
}

input ExpenseWhereUniqueInput {
  id: ID
}

input ExpenseWhereInput {
  AND: [ExpenseWhereInput!]
  OR: [ExpenseWhereInput!]
  NOT: [ExpenseWhereInput!]
  id: IDFilter
  amount: FloatNullableFilter
  vendor: StringFilter
  description: StringFilter
  date: CalendarDayNullableFilter
  mileage: IntNullableFilter
  receiptNumber: StringFilter
  car: CarWhereInput
}

input ExpenseOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  vendor: OrderDirection
  description: OrderDirection
  date: OrderDirection
  mileage: OrderDirection
  receiptNumber: OrderDirection
}

input ExpenseUpdateInput {
  amount: Float
  vendor: String
  description: String
  date: CalendarDay
  mileage: Int
  receiptNumber: String
  car: CarRelateToOneForUpdateInput
}

input ExpenseUpdateArgs {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateInput!
}

input ExpenseCreateInput {
  amount: Float
  vendor: String
  description: String
  date: CalendarDay
  mileage: Int
  receiptNumber: String
  car: CarRelateToOneForCreateInput
}

type Balance {
  id: ID!
  name: String
  balanceAmount: Float
  returnDate: CalendarDay
  driverLicenseState: String
  driverLicenseNumber: String
  SSN: String
  phone: String
  employer: String
  employerPhone: String
  dateOfBirth: String
  notes: String
  localContactName: String
  localContactPhone: String
}

input BalanceWhereUniqueInput {
  id: ID
}

input BalanceWhereInput {
  AND: [BalanceWhereInput!]
  OR: [BalanceWhereInput!]
  NOT: [BalanceWhereInput!]
  id: IDFilter
  name: StringFilter
  balanceAmount: FloatNullableFilter
  returnDate: CalendarDayNullableFilter
  driverLicenseState: StringFilter
  driverLicenseNumber: StringFilter
  SSN: StringFilter
  phone: StringFilter
  employer: StringFilter
  employerPhone: StringFilter
  dateOfBirth: StringFilter
  notes: StringFilter
  localContactName: StringFilter
  localContactPhone: StringFilter
}

input BalanceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  balanceAmount: OrderDirection
  returnDate: OrderDirection
  driverLicenseState: OrderDirection
  driverLicenseNumber: OrderDirection
  SSN: OrderDirection
  phone: OrderDirection
  employer: OrderDirection
  employerPhone: OrderDirection
  dateOfBirth: OrderDirection
  notes: OrderDirection
  localContactName: OrderDirection
  localContactPhone: OrderDirection
}

input BalanceUpdateInput {
  name: String
  balanceAmount: Float
  returnDate: CalendarDay
  driverLicenseState: String
  driverLicenseNumber: String
  SSN: String
  phone: String
  employer: String
  employerPhone: String
  dateOfBirth: String
  notes: String
  localContactName: String
  localContactPhone: String
}

input BalanceUpdateArgs {
  where: BalanceWhereUniqueInput!
  data: BalanceUpdateInput!
}

input BalanceCreateInput {
  name: String
  balanceAmount: Float
  returnDate: CalendarDay
  driverLicenseState: String
  driverLicenseNumber: String
  SSN: String
  phone: String
  employer: String
  employerPhone: String
  dateOfBirth: String
  notes: String
  localContactName: String
  localContactPhone: String
}

type BalancePayment {
  id: ID!
  paymentAmount: Float
}

input BalancePaymentWhereUniqueInput {
  id: ID
}

input BalancePaymentWhereInput {
  AND: [BalancePaymentWhereInput!]
  OR: [BalancePaymentWhereInput!]
  NOT: [BalancePaymentWhereInput!]
  id: IDFilter
  paymentAmount: FloatNullableFilter
}

input BalancePaymentOrderByInput {
  id: OrderDirection
  paymentAmount: OrderDirection
}

input BalancePaymentUpdateInput {
  paymentAmount: Float
}

input BalancePaymentUpdateArgs {
  where: BalancePaymentWhereUniqueInput!
  data: BalancePaymentUpdateInput!
}

input BalancePaymentCreateInput {
  paymentAmount: Float
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCar(data: CarCreateInput!): Car
  createCars(data: [CarCreateInput!]!): [Car]
  updateCar(where: CarWhereUniqueInput!, data: CarUpdateInput!): Car
  updateCars(data: [CarUpdateArgs!]!): [Car]
  deleteCar(where: CarWhereUniqueInput!): Car
  deleteCars(where: [CarWhereUniqueInput!]!): [Car]
  createIncome(data: IncomeCreateInput!): Income
  createIncomes(data: [IncomeCreateInput!]!): [Income]
  updateIncome(where: IncomeWhereUniqueInput!, data: IncomeUpdateInput!): Income
  updateIncomes(data: [IncomeUpdateArgs!]!): [Income]
  deleteIncome(where: IncomeWhereUniqueInput!): Income
  deleteIncomes(where: [IncomeWhereUniqueInput!]!): [Income]
  createExpense(data: ExpenseCreateInput!): Expense
  createExpenses(data: [ExpenseCreateInput!]!): [Expense]
  updateExpense(
    where: ExpenseWhereUniqueInput!
    data: ExpenseUpdateInput!
  ): Expense
  updateExpenses(data: [ExpenseUpdateArgs!]!): [Expense]
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense
  deleteExpenses(where: [ExpenseWhereUniqueInput!]!): [Expense]
  createBalance(data: BalanceCreateInput!): Balance
  createBalances(data: [BalanceCreateInput!]!): [Balance]
  updateBalance(
    where: BalanceWhereUniqueInput!
    data: BalanceUpdateInput!
  ): Balance
  updateBalances(data: [BalanceUpdateArgs!]!): [Balance]
  deleteBalance(where: BalanceWhereUniqueInput!): Balance
  deleteBalances(where: [BalanceWhereUniqueInput!]!): [Balance]
  createBalancePayment(data: BalancePaymentCreateInput!): BalancePayment
  createBalancePayments(data: [BalancePaymentCreateInput!]!): [BalancePayment]
  updateBalancePayment(
    where: BalancePaymentWhereUniqueInput!
    data: BalancePaymentUpdateInput!
  ): BalancePayment
  updateBalancePayments(data: [BalancePaymentUpdateArgs!]!): [BalancePayment]
  deleteBalancePayment(where: BalancePaymentWhereUniqueInput!): BalancePayment
  deleteBalancePayments(
    where: [BalancePaymentWhereUniqueInput!]!
  ): [BalancePayment]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  cars(
    where: CarWhereInput! = {}
    orderBy: [CarOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Car!]
  car(where: CarWhereUniqueInput!): Car
  carsCount(where: CarWhereInput! = {}): Int
  incomes(
    where: IncomeWhereInput! = {}
    orderBy: [IncomeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Income!]
  income(where: IncomeWhereUniqueInput!): Income
  incomesCount(where: IncomeWhereInput! = {}): Int
  expenses(
    where: ExpenseWhereInput! = {}
    orderBy: [ExpenseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Expense!]
  expense(where: ExpenseWhereUniqueInput!): Expense
  expensesCount(where: ExpenseWhereInput! = {}): Int
  balances(
    where: BalanceWhereInput! = {}
    orderBy: [BalanceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Balance!]
  balance(where: BalanceWhereUniqueInput!): Balance
  balancesCount(where: BalanceWhereInput! = {}): Int
  balancePayments(
    where: BalancePaymentWhereInput! = {}
    orderBy: [BalancePaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BalancePayment!]
  balancePayment(where: BalancePaymentWhereUniqueInput!): BalancePayment
  balancePaymentsCount(where: BalancePaymentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
